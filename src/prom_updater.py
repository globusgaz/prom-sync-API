import os
import json
import requests
import xml.etree.ElementTree as ET
import time
import hashlib

API_URL = "https://my.prom.ua/api/v1/products/edit_by_external_id"
API_TOKEN = os.getenv("PROM_API_TOKEN")

FEEDS_FILE = "feeds.txt"
STATE_FILE = "product_state.json"  # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
BATCH_SIZE = 50  # –∑–±—ñ–ª—å—à–µ–Ω–æ, –±–æ —Ç–æ–≤–∞—Ä—ñ–≤ –º–µ–Ω—à–µ
REQUEST_TIMEOUT = 30
DELAY_BETWEEN_BATCHES = 1.0

def load_previous_state():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω —Ç–æ–≤–∞—Ä—ñ–≤"""
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, "r") as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_current_state(products):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ç–æ–≤–∞—Ä—ñ–≤"""
    state = {}
    for p in products:
        state[p["id"]] = {
            "price": p["price"],
            "presence": p["presence"],
            "quantity_in_stock": p["quantity_in_stock"]
        }
    with open(STATE_FILE, "w") as f:
        json.dump(state, f, indent=2)

def has_changed(product, old_state):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Ç–æ–≤–∞—Ä"""
    product_id = product["id"]
    if product_id not in old_state:
        return True  # –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
    
    old = old_state[product_id]
    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ü—ñ–Ω—É, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    return (
        old.get("price") != product["price"] or
        old.get("presence") != product["presence"] or
        old.get("quantity_in_stock") != product["quantity_in_stock"]
    )

def parse_feed(url):
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
        }
        response = requests.get(url, timeout=REQUEST_TIMEOUT, headers=headers)
        response.raise_for_status()
        root = ET.fromstring(response.content)

        for offer in root.findall(".//offer"):
            product_id = offer.get("id")
            available = offer.get("available", "false").lower()
            price_el = offer.find("price")

            # –¶—ñ–Ω–∞ (—è–∫—â–æ —î)
            price = None
            if price_el is not None and price_el.text:
                try:
                    price = float(price_el.text.strip())
                except ValueError:
                    price = None

            # –°—Ç–∞—Ç—É—Å –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
            if available == "true":
                presence = "available"
                quantity_in_stock = 1
            else:
                presence = "not_available"
                quantity_in_stock = 0

            yield {
                "id": product_id,
                "price": price,
                "presence": presence,
                "quantity_in_stock": quantity_in_stock
            }
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 403:
            print(f"‚ö†Ô∏è –§—ñ–¥ {url} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π (403) - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        elif e.response.status_code == 404:
            print(f"‚ö†Ô∏è –§—ñ–¥ {url} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (404) - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP {e.response.status_code} –¥–ª—è {url}")
        return
    except requests.exceptions.Timeout:
        print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –¥–ª—è {url} - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        return
    except requests.exceptions.ConnectionError:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è {url} - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        return
    except ET.ParseError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É XML –¥–ª—è {url}: {e}")
        return
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ—ñ–¥—É {url}: {e}")
        return

def send_updates(batch, batch_num, total_batches):
    headers = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json",
        "X-LANGUAGE": "uk"
    }

    # –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
    payload = []
    for item in batch:
        obj = {"id": item["id"]}

        if item["price"] is not None:
            obj["price"] = item["price"]

        obj["presence"] = item["presence"]
        obj["quantity_in_stock"] = item["quantity_in_stock"]

        payload.append(obj)

    print(f"üîÑ –ü–∞—Ä—Ç—ñ—è {batch_num}/{total_batches} ({len(payload)} —Ç–æ–≤–∞—Ä—ñ–≤)")

    try:
        response = requests.post(API_URL, headers=headers, json=payload, timeout=REQUEST_TIMEOUT)
        
        if response.status_code == 200:
            print(f"‚úÖ –ü–∞—Ä—Ç—ñ—è {batch_num} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {batch_num} - –ø–æ–º–∏–ª–∫–∞ {response.status_code}")
            try:
                error_data = response.json()
                print(f"–î–µ—Ç–∞–ª—ñ: {error_data}")
            except:
                print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:100]}")
                
    except requests.exceptions.Timeout:
        print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–∞—Ä—Ç—ñ—ó {batch_num}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è –ø–∞—Ä—Ç—ñ—ó {batch_num}: {e}")

def main():
    if not API_TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω PROM_API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    if not os.path.exists(FEEDS_FILE):
        print(f"‚ùå –§–∞–π–ª {FEEDS_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    with open(FEEDS_FILE, "r") as f:
        feed_urls = [line.strip() for line in f if line.strip()]

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
    old_state = load_previous_state()
    print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω: {len(old_state)} —Ç–æ–≤–∞—Ä—ñ–≤")

    all_products = []
    successful_feeds = 0

    print("\nüîÑ –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ —Ñ—ñ–¥—ñ–≤...")
    for url in feed_urls:
        print(f"üîÑ –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–¥—É: {url}")
        feed_count = 0
        for product in parse_feed(url):
            all_products.append(product)
            feed_count += 1
        
        if feed_count > 0:
            successful_feeds += 1
            print(f"‚úÖ –§—ñ–¥ {url}: {feed_count} —Ç–æ–≤–∞—Ä—ñ–≤")

    print(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–±–æ—Ä—É:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ñ—ñ–¥—ñ–≤: {successful_feeds}/{len(feed_urls)}")
    print(f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")

    if not all_products:
        print("‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏!")
        return

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏
    changed_products = [p for p in all_products if has_changed(p, old_state)]
    
    print(f"\nüîç –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω:")
    print(f"üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")
    print(f"üîÑ –ó–º—ñ–Ω–∏–ª–æ—Å—å: {len(changed_products)}")
    print(f"‚úÖ –ë–µ–∑ –∑–º—ñ–Ω: {len(all_products) - len(changed_products)}")

    if not changed_products:
        print("\n‚úÖ –ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!")
        # –í—Å–µ –æ–¥–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        save_current_state(all_products)
        return

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–∞—Ä—Ç—ñ–π
    total_batches = (len(changed_products) - 1) // BATCH_SIZE + 1
    print(f"\nüöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {len(changed_products)} —Ç–æ–≤–∞—Ä—ñ–≤ —É {total_batches} –ø–∞—Ä—Ç—ñ—è—Ö...")
    
    start_time = time.time()
    
    for i in range(0, len(changed_products), BATCH_SIZE):
        batch = changed_products[i:i+BATCH_SIZE]
        batch_num = i // BATCH_SIZE + 1
        
        send_updates(batch, batch_num, total_batches)
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–∞—Ä—Ç—ñ—è–º–∏ (–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ—ó)
        if batch_num < total_batches:
            time.sleep(DELAY_BETWEEN_BATCHES)
    
    end_time = time.time()
    duration = end_time - start_time
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω
    save_current_state(all_products)
    print(f"\nüíæ –°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {len(all_products)} —Ç–æ–≤–∞—Ä—ñ–≤")
    
    print(f"\n‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥ ({duration/60:.1f} —Ö–≤–∏–ª–∏–Ω)")
    if changed_products:
        print(f"üìä –°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å: {len(changed_products)/duration:.1f} —Ç–æ–≤–∞—Ä—ñ–≤/—Å–µ–∫")

if __name__ == "__main__":
    main()
