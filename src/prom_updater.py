# src/prom_updater.py
import os
import time
import json
import asyncio
import aiohttp
import requests
import orjson
import lxml.etree as ET
from dotenv import load_dotenv
from typing import Dict, List, Any, Optional

load_dotenv()

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
PROM_API_TOKEN = os.getenv("PROM_API_TOKEN")  # MUST be set
PROM_LIST_URL = os.getenv("PROM_LIST_URL", "https://my.prom.ua/api/v1/products/list")
PROM_EDIT_URL = os.getenv("PROM_EDIT_URL", "https://my.prom.ua/api/v1/products/edit")

HEADERS = {
    "Authorization": f"Bearer {PROM_API_TOKEN}" if PROM_API_TOKEN else "",
    "Content-Type": "application/json",
}

BATCH_SIZE = int(os.getenv("BATCH_SIZE", "100"))
MAX_CONCURRENT = int(os.getenv("MAX_CONCURRENT", "5"))
REQUEST_TIMEOUT = int(os.getenv("REQUEST_TIMEOUT", "60"))  # seconds per HTTP call
RETRY_ATTEMPTS = int(os.getenv("RETRY_ATTEMPTS", "3"))
CACHE_FILE = os.getenv("PROM_CACHE_FILE", "prom_cache.json")
CACHE_TTL = int(os.getenv("PROM_CACHE_TTL", "3600"))  # seconds
DEBUG_PROM = os.getenv("DEBUG_PROM", "0") == "1"
DRY_RUN = os.getenv("DRY_RUN", "0") == "1"


# -------------------- –£—Ç–∏–ª—ñ—Ç–∏ –∫–µ—à—É --------------------
def load_prom_cache(path: str, ttl: int) -> Optional[Dict[str, Any]]:
    try:
        if not os.path.exists(path):
            return None
        if (time.time() - os.path.getmtime(path)) > ttl:
            return None
        with open(path, "r", encoding="utf-8") as fh:
            return json.load(fh)
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–µ—à—É {path}: {e}")
        return None


def save_prom_cache(path: str, data: Dict[str, Any]) -> None:
    try:
        with open(path, "w", encoding="utf-8") as fh:
            json.dump(data, fh, ensure_ascii=False)
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∫–µ—à—É {path}: {e}")


# -------------------- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–¥—ñ–≤ --------------------
async def fetch_feed(session: aiohttp.ClientSession, url: str):
    try:
        async with session.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)) as resp:
            resp.raise_for_status()
            text = await resp.text()
            root = ET.fromstring(text.encode("utf-8"))
            offers = root.findall(".//offer")
            print(f"‚úÖ {url} ‚Äî {len(offers)} —Ç–æ–≤–∞—Ä—ñ–≤")
            return offers
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É {url}: {e}")
        return []


async def load_all_feeds(file_path="feeds.txt") -> List[ET._Element]:
    urls: List[str] = []
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            for line in f:
                v = line.strip()
                if v:
                    urls.append(v)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return []

    async with aiohttp.ClientSession() as session:
        tasks = [fetch_feed(session, url) for url in urls]
        results = await asyncio.gather(*tasks, return_exceptions=False)
        offers: List[ET._Element] = []
        for r in results:
            offers.extend(r)
        return offers


# -------------------- –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ Prom (–º–∞–ø–∞) --------------------
def get_prom_products() -> Dict[str, Dict[str, Any]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î dict: sku -> {"id": int, "price": float|None, "quantity_in_stock": int|None, "presence": str|None}
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à 'prom_cache.json' —è–∫—â–æ –≤—ñ–Ω —Å–≤—ñ–∂–∏–π.
    """
    # –°–ø—Ä–æ–±–∞ –∑ –∫–µ—à—É
    cached = load_prom_cache(CACHE_FILE, CACHE_TTL)
    if cached:
        if DEBUG_PROM:
            print(f"DEBUG: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–µ—à Prom ({len(cached)} –∑–∞–ø–∏—Å—ñ–≤) –∑ {CACHE_FILE}")
        return cached

    vendor_to_data: Dict[str, Dict[str, Any]] = {}
    page = 1
    while True:
        # retry loop –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        resp_json = None
        for attempt in range(1, RETRY_ATTEMPTS + 1):
            try:
                r = requests.get(PROM_LIST_URL, headers=HEADERS, params={"page": page, "limit": 100}, timeout=REQUEST_TIMEOUT)
                if r.status_code == 429:
                    backoff = 2 ** (attempt - 1)
                    print(f"‚ö†Ô∏è Prom LIST 429, —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}, —Å–ø—Ä–æ–±–∞ {attempt}/{RETRY_ATTEMPTS}, —á–µ–∫–∞—é {backoff}s")
                    time.sleep(backoff)
                    continue
                if r.status_code != 200:
                    print(f"‚ö†Ô∏è Prom list error {r.status_code}: {r.text[:200]}")
                    resp_json = {}  # –∑—É–ø–∏–Ω–∏–º–æ—Å—è
                    break
                resp_json = r.json()
                break
            except requests.RequestException as e:
                backoff = 2 ** (attempt - 1)
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ GET products.list (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}) attempt {attempt}: {e} ‚Äî —á–µ–∫–∞—é {backoff}s")
                time.sleep(backoff)
        if not resp_json:
            break

        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        products = []
        if isinstance(resp_json, dict):
            # —Ç–∏–ø–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {"products": [...], "total_count": N}
            if "products" in resp_json and isinstance(resp_json["products"], list):
                products = resp_json["products"]
            else:
                # –ø–æ—à—É–∫ –ø–µ—Ä—à–æ–≥–æ —Å–ø–∏—Å–∫—É
                for v in resp_json.values():
                    if isinstance(v, list):
                        products = v
                        break
        elif isinstance(resp_json, list):
            products = resp_json

        if not products:
            break

        for p in products:
            sku = p.get("sku") or p.get("external_id") or p.get("vendor_code") or p.get("article")
            if not sku:
                continue
            vendor_to_data[str(sku).strip()] = {
                "id": p.get("id"),
                "price": p.get("price"),
                "quantity_in_stock": p.get("quantity_in_stock"),
                "presence": p.get("presence"),
            }

        page += 1

    # –∑–±–µ—Ä–µ–∂–µ–º–æ –∫–µ—à
    try:
        save_prom_cache(CACHE_FILE, vendor_to_data)
        if DEBUG_PROM:
            print(f"DEBUG: –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∫–µ—à Prom ({len(vendor_to_data)}) -> {CACHE_FILE}")
    except Exception:
        pass

    print(f"DEBUG: –º–∞–ø–∞ sku->id —Ä–æ–∑–º—ñ—Ä = {len(vendor_to_data)}")
    return vendor_to_data


# -------------------- –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–∞—Ç—á (–∑ retry + timeout) --------------------
async def send_batch(session: aiohttp.ClientSession, batch: List[Dict[str, Any]], sem: asyncio.Semaphore, batch_idx: int) -> bool:
    """–ü–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ OK, False —ñ–Ω–∞–∫—à–µ."""
    async with sem:
        # –¢—ñ–ª—å–∫–∏ debug: –ø–æ–∫–∞–∂–µ–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –≤–∏–±—ñ—Ä–∫—É payload (—â–æ–± –Ω–µ –¥—Ä—É–∫—É–≤–∞—Ç–∏ 40k)
        if DEBUG_PROM:
            try:
                sample = orjson.dumps({"products_sample": batch[:10]}, option=orjson.OPT_INDENT_2).decode()
                print(f"[batch {batch_idx}] DEBUG sample payload:\n{sample}")
            except Exception:
                pass
        else:
            print(f"[batch {batch_idx}] –ù–∞–¥—Å–∏–ª–∞—é {len(batch)} —Ç–æ–≤–∞—Ä—ñ–≤...")

        for attempt in range(1, RETRY_ATTEMPTS + 1):
            try:
                # –≤–∏–∫–æ–Ω—É—î–º–æ POST –∑ —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
                async with session.post(PROM_EDIT_URL, headers=HEADERS, json={"products": batch}, timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)) as resp:
                    text = await resp.text()
                    status = resp.status
                    if 200 <= status < 300:
                        print(f"[batch {batch_idx}] ‚úÖ OK ({len(batch)})")
                        return True
                    # —Ä–µ—Ç—Ä–∞—ó–º–æ –Ω–∞ 429/5xx
                    if status == 429 or 500 <= status < 600:
                        backoff = 2 ** (attempt - 1)
                        print(f"[batch {batch_idx}] transient HTTP {status}, attempt {attempt}/{RETRY_ATTEMPTS}, backoff {backoff}s")
                        await asyncio.sleep(backoff)
                        continue
                    # —ñ–Ω—à—ñ —Å—Ç–∞—Ç—É—Å–∏ ‚Äî –Ω–µ —Ä–µ—Ç—Ä–∞—ó–º–æ
                    print(f"[batch {batch_idx}] HTTP {status} ‚Äî {text[:400]}")
                    return False
            except asyncio.TimeoutError:
                backoff = 2 ** (attempt - 1)
                print(f"[batch {batch_idx}] timeout attempt {attempt}/{RETRY_ATTEMPTS}, backoff {backoff}s")
                await asyncio.sleep(backoff)
            except Exception as e:
                backoff = 2 ** (attempt - 1)
                print(f"[batch {batch_idx}] exception attempt {attempt}: {e}, backoff {backoff}s")
                await asyncio.sleep(backoff)
        print(f"[batch {batch_idx}] FAILED after {RETRY_ATTEMPTS} attempts")
        return False


async def update_products(updates: List[Dict[str, Any]]) -> None:
    if not updates:
        print("üö´ –ù–µ–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω—å")
        return

    batches = [updates[i : i + BATCH_SIZE] for i in range(0, len(updates), BATCH_SIZE)]
    sem = asyncio.Semaphore(MAX_CONCURRENT)

    conn = aiohttp.TCPConnector(limit_per_host=MAX_CONCURRENT)
    timeout_total = aiohttp.ClientTimeout(total=REQUEST_TIMEOUT * 2 + 10)
    async with aiohttp.ClientSession(connector=conn, timeout=timeout_total) as session:
        tasks = [asyncio.create_task(send_batch(session, batch, sem, idx + 1)) for idx, batch in enumerate(batches)]
        results = await asyncio.gather(*tasks, return_exceptions=True)

    ok = sum(1 for r in results if r is True)
    failed = len(batches) - ok
    print(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞—Ç—á—ñ–≤: {len(batches)}; —É—Å–ø—ñ—à–Ω–æ: {ok}; –Ω–µ—É—Å–ø—ñ—à–Ω–æ: {failed}")


# -------------------- –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ --------------------
async def main():
    if not PROM_API_TOKEN:
        print("‚ùå PROM_API_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ")
        return

    offers = await load_all_feeds()
    print(f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ (offers): {len(offers)}")

    vendor_to_data = get_prom_products()
    updates: List[Dict[str, Any]] = []

    # –§–æ—Ä–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤, –¥–µ —î —Ä–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å
    missing_vc = 0
    for offer in offers:
        # vendor_code –º–æ–∂–µ –±—É—Ç–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç—ñ id –∞–±–æ –≤ —Ç–µ–≥—É vendorCode
        vendor_code = (offer.get("id") or offer.findtext("vendorCode") or "").strip()
        price_text = (offer.findtext("price") or "").strip()
        qty_text = (offer.findtext("quantity") or "").strip()

        if not vendor_code or not price_text:
            continue

        try:
            new_price = float(price_text.replace(",", "."))
        except Exception:
            continue
        try:
            new_qty = int(float(qty_text)) if qty_text else 0
        except Exception:
            new_qty = 0

        prom_item = vendor_to_data.get(vendor_code)
        if not prom_item:
            missing_vc += 1
            continue

        prom_price = prom_item.get("price")
        prom_qty = prom_item.get("quantity_in_stock")
        prom_presence = prom_item.get("presence")
        new_presence = "available" if new_qty > 0 else "not_available"

        price_changed = (prom_price is None) or (float(prom_price) != float(new_price))
        qty_changed = (prom_qty is None) or (int(prom_qty) != int(new_qty))
        presence_changed = (prom_presence != new_presence)

        if price_changed or qty_changed or presence_changed:
            updates.append({
                "id": prom_item["id"],
                "price": new_price,
                "quantity_in_stock": new_qty,
                "presence": new_presence,
            })

    print(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ {len(updates)} –æ–Ω–æ–≤–ª–µ–Ω—å (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ vendor_code: {missing_vc})")

    if DRY_RUN:
        print("‚öôÔ∏è DRY_RUN=1 ‚Äî –∑—Ä–∞–∑–æ–∫ –ø–µ—Ä—à–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å:")
        print(orjson.dumps(updates[:10], option=orjson.OPT_INDENT_2).decode() if updates else "[]")
        return

    await update_products(updates)


if __name__ == "__main__":
    asyncio.run(main())
