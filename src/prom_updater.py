import asyncio
import json
import os
import time
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
import hashlib
import xml.etree.ElementTree as ET

import aiohttp

from src.config import get_settings
from src.prom_client import PromClient

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
REQUEST_TIMEOUT_FEED = aiohttp.ClientTimeout(total=120)
REQUEST_TIMEOUT_API = aiohttp.ClientTimeout(total=30)
BATCH_SIZE = 25  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –±–∞—Ç—á—É
CONCURRENT_BATCHES = 2  # 2 –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç–∏
API_DELAY = 1.0  # –ó–º–µ–Ω—à–µ–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
    "Accept": "application/xml, text/xml, */*",
    "Accept-Language": "uk-UA,uk;q=0.9,en;q=0.8",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "Cache-Control": "no-cache",
    "Pragma": "no-cache"
}

def _parse_yml_content(content: bytes) -> List[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏—Ç—å YML –∫–æ–Ω—Ç–µ–Ω—Ç —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤."""
    try:
        root = ET.fromstring(content)
        offers = root.findall(".//offer")
    except ET.ParseError as e:
        print(f"‚ùå YML parse error: {e}")
        return []

    products: List[Dict[str, Any]] = []
    for offer in offers:
        # –í YML —Ñ–∞–π–ª–∞—Ö external_id –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π
        external_id = offer.get("id")
        if not external_id:
            continue
            
        # –í–∏—Ç—è–≥—É—î–º–æ —Ü—ñ–Ω—É
        price_elem = offer.find("price")
        price = None
        if price_elem is not None and price_elem.text:
            try:
                price = float(price_elem.text.strip().replace(",", "."))
            except (ValueError, AttributeError):
                pass
        
        # –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å
        presence = True  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç–æ–≤–∞—Ä –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
        quantity_in_stock = 1
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ç—Ä–∏–±—É—Ç available
        available = offer.get("available")
        if available is not None:
            presence = available.lower() in ("true", "1", "yes", "available", "in_stock")
            quantity_in_stock = 1 if presence else 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–≥–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        quantity_tags = ["quantity", "stock_quantity", "count", "quantity_in_stock"]
        for tag in quantity_tags:
            qty_elem = offer.find(tag)
            if qty_elem is not None and qty_elem.text:
                try:
                    qty = int(float(qty_elem.text.strip()))
                    quantity_in_stock = qty
                    presence = qty > 0
                    break
                except (ValueError, AttributeError):
                    continue
        
        item: Dict[str, Any] = {"id": external_id}
        if price is not None:
            item["price"] = price
        item["presence"] = presence
        item["quantity_in_stock"] = quantity_in_stock
        item["_presence_sure"] = True  # –í YML —Ñ–∞–π–ª–∞—Ö –¥–∞–Ω—ñ –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω—ñ
        
        products.append(item)
    
    return products

async def parse_yml_url(session: aiohttp.ClientSession, url: str) -> Tuple[bool, List[Dict[str, Any]]]:
    """–ü–∞—Ä—Å–∏—Ç—å YML —Ñ–∞–π–ª –∑ URL —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤."""
    try:
        async with session.get(url, headers=HEADERS, timeout=120) as response:
            if response.status == 200:
                content = await response.read()
                products = _parse_yml_content(content)
                return True, products
            else:
                print(f"‚ùå {url}: HTTP {response.status}")
                return False, []
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ {url}: {e}")
        return False, []

async def send_single_batch(session: aiohttp.ClientSession, client: PromClient, batch: List[Dict[str, Any]], batch_idx: int) -> Tuple[int, int]:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ–¥–∏–Ω –±–∞—Ç—á —ñ –ø–æ–≤–µ—Ä—Ç–∞—î (—É—Å–ø—ñ—à–Ω—ñ, –ø–æ–º–∏–ª–∫–∏)"""
    # –§–æ—Ä–º—É—î–º–æ payload –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é Prom.ua
    # API Prom.ua –æ—á—ñ–∫—É—î –ø–æ–ª–µ 'id' –∑–∞–º—ñ—Å—Ç—å 'external_id'
    payload = []
    for product in batch:
        item = {
            "id": product["id"],  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'id' –∑–∞–º—ñ—Å—Ç—å 'external_id'
        }
        
        # –î–æ–¥–∞—î–º–æ —Ü—ñ–Ω—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∞ —î
        if product.get("price") is not None:
            item["price"] = product["price"]
        
        # –î–æ–¥–∞—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —á—ñ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª
        if product.get("_presence_sure", False):
            item["presence"] = product["presence"]
            item["quantity_in_stock"] = product["quantity_in_stock"]
            item["presence_sure"] = True
        
        payload.append(item)
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑ 1 —Ä–µ—Ç—Ä–∞—î–º
    for attempt in range(2):
        try:
            status, response_text = await client.update_products(session, "/api/v1/products/edit_by_external_id", payload)
            if 200 <= status < 300:
                # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
                print(f"‚úÖ –ü–∞—Ä—Ç—ñ—è {batch_idx}: HTTP {status}")
                try:
                    response_data = json.loads(response_text)
                    if "processed_ids" in response_data:
                        processed = len(response_data["processed_ids"])
                        print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ: {processed}/{len(batch)} —Ç–æ–≤–∞—Ä—ñ–≤")
                        if "errors" in response_data and response_data["errors"]:
                            error_count = len(response_data["errors"])
                            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–æ–∫: {error_count}")
                            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ –ø–æ–º–∏–ª–∫–∏
                            for i, (pid, error) in enumerate(list(response_data["errors"].items())[:3]):
                                print(f"  ‚ùå {pid}: {error}")
                            if error_count > 3:
                                print(f"  ... —Ç–∞ —â–µ {error_count - 3} –ø–æ–º–∏–ª–æ–∫")
                    else:
                        print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text[:200]}")
                except json.JSONDecodeError:
                    print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text[:200]}")
                return len(batch), 0
            else:
                # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
                print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {batch_idx}: HTTP {status}")
                if response_text:
                    print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text[:300]}")
                if status in (403, 429) or 500 <= status <= 599:
                    if attempt == 0:
                        print(f"‚ö†Ô∏è –ü–∞—Ä—Ç—ñ—è {batch_idx}: —Ä–µ—Ç—Ä–∞–π —á–µ—Ä–µ–∑ {status}")
                        await asyncio.sleep(5)  # –ë—ñ–ª—å—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
                        continue
                # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ - –Ω–µ —Ä–µ—Ç—Ä–∞—ó–º–æ
                return 0, len(batch)
        except Exception as e:
            print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {batch_idx}: Exception {e}")
            if attempt == 0:
                await asyncio.sleep(1)
                continue
            return 0, len(batch)
    
    return 0, len(batch)

async def send_updates(session: aiohttp.ClientSession, client: PromClient, products: List[Dict[str, Any]], batch_size: int) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –±–∞—Ç—á–∞–º–∏"""
    total_products = len(products)
    total_batches = (total_products + batch_size - 1) // batch_size
    
    print(f"üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {total_products} —Ç–æ–≤–∞—Ä—ñ–≤ —É {total_batches} –ø–∞—Ä—Ç—ñ—è—Ö...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    semaphore = asyncio.Semaphore(CONCURRENT_BATCHES)
    
    async def process_batch(batch_idx: int, batch: List[Dict[str, Any]]) -> Tuple[int, int]:
        async with semaphore:
            await asyncio.sleep(API_DELAY)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            return await send_single_batch(session, client, batch, batch_idx)
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –±–∞—Ç—á—ñ
    batches = []
    for i in range(0, total_products, batch_size):
        batch = products[i:i + batch_size]
        batch_idx = i // batch_size + 1
        batches.append((batch_idx, batch))
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –±–∞—Ç—á—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    tasks = [process_batch(batch_idx, batch) for batch_idx, batch in batches]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    total_success = 0
    total_errors = 0
    
    for i, result in enumerate(results):
        if isinstance(result, Exception):
            print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {i+1}: Exception {result}")
            total_errors += len(batches[i][1])
        else:
            success, errors = result
            total_success += success
            total_errors += errors
    
    print(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {total_success}")
    print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {total_errors}")

def load_yml_urls() -> List[str]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ URL YML —Ñ–∞–π–ª—ñ–≤"""
    yml_urls = [
        "https://raw.githubusercontent.com/globusgaz/yml-generator/main/all_1.yml",
        "https://raw.githubusercontent.com/globusgaz/yml-generator/main/all_2.yml", 
        "https://raw.githubusercontent.com/globusgaz/yml-generator/main/all_3.yml"
    ]
    
    return yml_urls

async def main_async() -> int:
    """–û—Å–Ω–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    settings = get_settings()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è YML URL
    yml_urls = load_yml_urls()
    if not yml_urls:
        print("‚ùå –ù–µ–º–∞—î YML URL –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        return 1
    
    print(f"üîó –ó–Ω–∞–π–¥–µ–Ω–æ {len(yml_urls)} YML URL")
    for url in yml_urls:
        print(f"  üìÑ {url}")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
    state_file = "product_state.json"
    previous_state = {}
    if os.path.exists(state_file):
        try:
            with open(state_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                previous_state = data.get("products", {})
            print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω: {len(previous_state)} —Ç–æ–≤–∞—Ä—ñ–≤")
        except Exception:
            print("üìÇ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ YML URL
    print("üîÑ –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ YML URL...")
    all_products = []
    successful_urls = 0
    
    async with aiohttp.ClientSession() as session:
        for i, yml_url in enumerate(yml_urls, 1):
            print(f"üîÑ –û–±—Ä–æ–±–∫–∞ URL {i}: {yml_url}")
            success, products = await parse_yml_url(session, yml_url)
            if success:
                all_products.extend(products)
                successful_urls += 1
                print(f"‚úÖ URL {yml_url}: {len(products)} —Ç–æ–≤–∞—Ä—ñ–≤")
            else:
                print(f"‚ùå URL {yml_url}: –ø–æ–º–∏–ª–∫–∞")
    
    print(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–±–æ—Ä—É:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö URL: {successful_urls}/{len(yml_urls)}")
    print(f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")
    
    if not all_products:
        print("‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return 1
    
    # –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω
    print("\nüîç –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω:")
    print(f"üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")
    
    # –ó–ê–í–ñ–î–ò –æ–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
    products_to_update = all_products
    print(f"üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –í–°–Ü —Ç–æ–≤–∞—Ä–∏: {len(products_to_update)}")
    
    if not products_to_update:
        print("‚úÖ –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return 0

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å
    print(f"\nüöÄ –û–Ω–æ–≤–ª–µ–Ω–Ω—è {len(products_to_update)} —Ç–æ–≤–∞—Ä—ñ–≤...")

    client = PromClient(
        base_url=settings.prom_base_url,
        token=settings.prom_api_token,
        auth_header=settings.prom_auth_header,
        auth_scheme=settings.prom_auth_scheme,
        timeout_seconds=settings.http_timeout_seconds,
    )

    async with aiohttp.ClientSession() as session:
        await send_updates(session, client, products_to_update, BATCH_SIZE)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    state = {
        "timestamp": datetime.now().isoformat(),
        "products": {p["id"]: p for p in all_products}
    }
    with open(state_file, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return 0

if __name__ == "__main__":
    raise SystemExit(asyncio.run(main_async()))
