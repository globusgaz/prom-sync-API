import asyncio
import json
import os
import time
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
import hashlib
import xml.etree.ElementTree as ET

import aiohttp

from src.config import get_settings
from src.prom_client import PromClient

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
REQUEST_TIMEOUT_FEED = aiohttp.ClientTimeout(total=120)
REQUEST_TIMEOUT_API = aiohttp.ClientTimeout(total=30)
BATCH_SIZE = 10  # –ú–µ–Ω—à—ñ –±–∞—Ç—á—ñ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
CONCURRENT_BATCHES = 1  # –¢—ñ–ª—å–∫–∏ 1 –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç
API_DELAY = 2.0  # –ë—ñ–ª—å—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ —Ñ—ñ–¥—ñ–≤
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
    "Accept": "application/xml, text/xml, */*",
    "Accept-Language": "uk-UA,uk;q=0.9,en;q=0.8",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "Cache-Control": "no-cache",
    "Pragma": "no-cache"
}

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ external_id
def _starts_with_fpref(x: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ä—è–¥–æ–∫ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É fN_"""
    return len(x) >= 3 and x[0] == "f" and x[1].isdigit() and x[2] == "_"

def _build_external_id(offer: ET.Element, feed_index: int) -> Optional[str]:
    """–ë—É–¥—É—î external_id –∑–≥—ñ–¥–Ω–æ –∑ –ª–æ–≥—ñ–∫–æ—é yml_generator"""
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ vendorCode
    vendor_code = offer.findtext("vendorCode")
    if vendor_code and vendor_code.strip():
        vc = vendor_code.strip()
        # –Ø–∫—â–æ –≤–∂–µ –º–∞—î –ø—Ä–µ—Ñ—ñ–∫—Å fN_, –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
        if _starts_with_fpref(vc):
            return vc
        # –Ü–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å f{feed_index}_
        return f"f{feed_index}_{vc}"
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î vendorCode, –±–µ—Ä–µ–º–æ offer/@id
    offer_id = offer.get("id")
    if offer_id and offer_id.strip():
        oid = offer_id.strip()
        # –Ø–∫—â–æ –≤–∂–µ –º–∞—î –ø—Ä–µ—Ñ—ñ–∫—Å fN_, –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
        if _starts_with_fpref(oid):
            return oid
        # –Ü–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å f{feed_index}_
        return f"f{feed_index}_{oid}"
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –Ω—ñ vendorCode, –Ω—ñ id, –≥–µ–Ω–µ—Ä—É—î–º–æ MD5
    try:
        content = ET.tostring(offer, encoding="unicode")
        md5_hash = hashlib.md5(content.encode("utf-8")).hexdigest()[:8]
        return f"f{feed_index}_{md5_hash}"
    except Exception:
        return None

def _extract_price(offer: ET.Element) -> Optional[float]:
    """–í–∏—Ç—è–≥—É—î —Ü—ñ–Ω—É –∑ offer"""
    price_elem = offer.find("price")
    if price_elem is not None and price_elem.text:
        try:
            return float(price_elem.text.strip().replace(",", "."))
        except (ValueError, AttributeError):
            pass
    return None

def _infer_availability(offer: ET.Element) -> Tuple[bool, int, bool]:
    """
    –í–∏–∑–Ω–∞—á–∞—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –∑ offer
    –ü–æ–≤–µ—Ä—Ç–∞—î: (presence, quantity, sure)
    sure = True –æ–∑–Ω–∞—á–∞—î —â–æ —î —á—ñ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ç—Ä–∏–±—É—Ç available
    available = offer.get("available")
    if available is not None:
        is_available = available.lower() in ("true", "1", "yes", "available", "in_stock")
        return is_available, 1 if is_available else 0, True
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–≥–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    quantity_tags = ["quantity", "stock_quantity", "count", "quantity_in_stock"]
    for tag in quantity_tags:
        qty_elem = offer.find(tag)
        if qty_elem is not None and qty_elem.text:
            try:
                qty = int(float(qty_elem.text.strip()))
                return qty > 0, qty, True
            except (ValueError, AttributeError):
                continue
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–≥–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
    presence_tags = ["presence", "in_stock", "available"]
    for tag in presence_tags:
        pres_elem = offer.find(tag)
        if pres_elem is not None and pres_elem.text:
            text = pres_elem.text.strip().lower()
            if text in ("true", "1", "yes", "available", "in_stock"):
                return True, 1, True
            elif text in ("false", "0", "no", "out_of_stock", "not_available"):
                return False, 0, True
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤, –≤–≤–∞–∂–∞—î–º–æ —â–æ —Ç–æ–≤–∞—Ä –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
    return True, 1, False

def _parse_xml_content(content: bytes, feed_index: int) -> List[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏—Ç—å XML –∫–æ–Ω—Ç–µ–Ω—Ç —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤."""
    try:
        root = ET.fromstring(content)
        offers = root.findall(".//offer")
    except ET.ParseError as e:
        print(f"‚ùå XML parse error: {e}")
        return []

    products: List[Dict[str, Any]] = []
    for offer in offers:
        external_id = _build_external_id(offer, feed_index)
        if not external_id:
            continue
        price = _extract_price(offer)
        presence, qty, sure = _infer_availability(offer)
        item: Dict[str, Any] = {"id": external_id}
        if price is not None:
            item["price"] = price
        if sure:
            item["presence"] = presence
            item["quantity_in_stock"] = qty
            item["_presence_sure"] = True
        else:
            item["_presence_sure"] = False
        products.append(item)
    return products

async def parse_feed(session: aiohttp.ClientSession, url: str, feed_index: int) -> Tuple[bool, List[Dict[str, Any]]]:
    """–ü–∞—Ä—Å–∏—Ç—å —Ñ—ñ–¥ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤. –ü—ñ–¥—Ç—Ä–∏–º—É—î Basic Auth –¥–ª—è api.dropshipping.ua."""
    try:
        # –î–ª—è api.dropshipping.ua –¥–æ–¥–∞—î–º–æ Basic Auth
        auth = None
        if "api.dropshipping.ua" in url:
            # –î–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å –¥–ª—è api.dropshipping.ua
            # –ó–∞–º—ñ–Ω—ñ—Ç—å "your_login" —Ç–∞ "your_password" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            auth = aiohttp.BasicAuth("your_login", "your_password")
        
        async with session.get(url, headers=HEADERS, timeout=REQUEST_TIMEOUT_FEED, auth=auth) as response:
            if response.status == 200:
                content = await response.read()
                products = _parse_xml_content(content, feed_index)
                return True, products
            else:
                print(f"‚ùå {url}: HTTP {response.status}")
                return False, []
    except Exception as e:
        print(f"‚ùå {url}: {e}")
        return False, []

async def send_single_batch(session: aiohttp.ClientSession, client: PromClient, batch: List[Dict[str, Any]], batch_idx: int) -> Tuple[int, int]:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ–¥–∏–Ω –±–∞—Ç—á —ñ –ø–æ–≤–µ—Ä—Ç–∞—î (—É—Å–ø—ñ—à–Ω—ñ, –ø–æ–º–∏–ª–∫–∏)"""
    # –§–æ—Ä–º—É—î–º–æ payload –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é Prom.ua
    # API Prom.ua –æ—á—ñ–∫—É—î –ø–æ–ª–µ 'id' –∑–∞–º—ñ—Å—Ç—å 'external_id'
    payload = []
    for product in batch:
        item = {
            "id": product["id"],  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'id' –∑–∞–º—ñ—Å—Ç—å 'external_id'
        }
        
        # –î–æ–¥–∞—î–º–æ —Ü—ñ–Ω—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∞ —î
        if product.get("price") is not None:
            item["price"] = product["price"]
        
        # –î–æ–¥–∞—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —á—ñ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª
        if product.get("_presence_sure", False):
            item["presence"] = product["presence"]
            item["quantity_in_stock"] = product["quantity_in_stock"]
            item["presence_sure"] = True
        
        payload.append(item)
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑ 1 —Ä–µ—Ç—Ä–∞—î–º
    for attempt in range(2):
        try:
            status, response_text = await client.update_products(session, "/api/v1/products/edit_by_external_id", payload)
            if 200 <= status < 300:
                # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
                print(f"‚úÖ –ü–∞—Ä—Ç—ñ—è {batch_idx}: HTTP {status}")
                try:
                    response_data = json.loads(response_text)
                    if "processed_ids" in response_data:
                        processed = len(response_data["processed_ids"])
                        print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ: {processed}/{len(batch)} —Ç–æ–≤–∞—Ä—ñ–≤")
                        if "errors" in response_data and response_data["errors"]:
                            error_count = len(response_data["errors"])
                            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–æ–∫: {error_count}")
                            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ –ø–æ–º–∏–ª–∫–∏
                            for i, (pid, error) in enumerate(list(response_data["errors"].items())[:3]):
                                print(f"  ‚ùå {pid}: {error}")
                            if error_count > 3:
                                print(f"  ... —Ç–∞ —â–µ {error_count - 3} –ø–æ–º–∏–ª–æ–∫")
                    else:
                        print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text[:200]}")
                except json.JSONDecodeError:
                    print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text[:200]}")
                return len(batch), 0
            else:
                # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
                print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {batch_idx}: HTTP {status}")
                if response_text:
                    print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text[:300]}")
                if status in (403, 429) or 500 <= status <= 599:
                    if attempt == 0:
                        print(f"‚ö†Ô∏è –ü–∞—Ä—Ç—ñ—è {batch_idx}: —Ä–µ—Ç—Ä–∞–π —á–µ—Ä–µ–∑ {status}")
                        await asyncio.sleep(5)  # –ë—ñ–ª—å—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
                        continue
                # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ - –Ω–µ —Ä–µ—Ç—Ä–∞—ó–º–æ
                return 0, len(batch)
        except Exception as e:
            print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {batch_idx}: Exception {e}")
            if attempt == 0:
                await asyncio.sleep(1)
                continue
            return 0, len(batch)
    
    return 0, len(batch)

async def send_updates(session: aiohttp.ClientSession, client: PromClient, products: List[Dict[str, Any]], batch_size: int) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –±–∞—Ç—á–∞–º–∏"""
    total_products = len(products)
    total_batches = (total_products + batch_size - 1) // batch_size
    
    print(f"üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {total_products} —Ç–æ–≤–∞—Ä—ñ–≤ —É {total_batches} –ø–∞—Ä—Ç—ñ—è—Ö...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    semaphore = asyncio.Semaphore(CONCURRENT_BATCHES)
    
    async def process_batch(batch_idx: int, batch: List[Dict[str, Any]]) -> Tuple[int, int]:
        async with semaphore:
            await asyncio.sleep(API_DELAY)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            return await send_single_batch(session, client, batch, batch_idx)
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –±–∞—Ç—á—ñ
    batches = []
    for i in range(0, total_products, batch_size):
        batch = products[i:i + batch_size]
        batch_idx = i // batch_size + 1
        batches.append((batch_idx, batch))
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –±–∞—Ç—á—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    tasks = [process_batch(batch_idx, batch) for batch_idx, batch in batches]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    total_success = 0
    total_errors = 0
    
    for i, result in enumerate(results):
        if isinstance(result, Exception):
            print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {i+1}: Exception {result}")
            total_errors += len(batches[i][1])
        else:
            success, errors = result
            total_success += success
            total_errors += errors
    
    print(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {total_success}")
    print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {total_errors}")

def load_urls() -> List[str]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ URL —Ñ—ñ–¥—ñ–≤ –∑ —Ñ–∞–π–ª—É feeds.txt"""
    feeds_file = "feeds.txt"
    if not os.path.exists(feeds_file):
        print(f"‚ùå –§–∞–π–ª {feeds_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return []
    
    urls = []
    with open(feeds_file, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line and line.startswith("http"):
                urls.append(line)
    
    return urls

async def main_async() -> int:
    """–û—Å–Ω–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    settings = get_settings()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è URL —Ñ—ñ–¥—ñ–≤
    urls = load_urls()
    if not urls:
        print("‚ùå –ù–µ–º–∞—î URL —Ñ—ñ–¥—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        return 1
    
    print(f"üîó –ó–Ω–∞–π–¥–µ–Ω–æ {len(urls)} —Ñ—ñ–¥—ñ–≤")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
    state_file = "product_state.json"
    previous_state = {}
    if os.path.exists(state_file):
        try:
            with open(state_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                previous_state = data.get("products", {})
            print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω: {len(previous_state)} —Ç–æ–≤–∞—Ä—ñ–≤")
        except Exception:
            print("üìÇ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ —Ñ—ñ–¥—ñ–≤
    print("üîÑ –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ —Ñ—ñ–¥—ñ–≤...")
    all_products = []
    successful_feeds = 0
    
    async with aiohttp.ClientSession() as session:
        for i, url in enumerate(urls, 1):
            print(f"üîÑ –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–¥—É: {url}")
            success, products = await parse_feed(session, url, i)
            if success:
                all_products.extend(products)
                successful_feeds += 1
                print(f"‚úÖ –§—ñ–¥ {url}: {len(products)} —Ç–æ–≤–∞—Ä—ñ–≤")
            else:
                print(f"‚ùå –§—ñ–¥ {url}: –ø–æ–º–∏–ª–∫–∞")
    
    print(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–±–æ—Ä—É:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ñ—ñ–¥—ñ–≤: {successful_feeds}/{len(urls)}")
    print(f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")
    
    if not all_products:
        print("‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return 1
    
    # –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω
    print("\nüîç –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω:")
    print(f"üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")
    
    # –ó–ê–í–ñ–î–ò –æ–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
    products_to_update = all_products
    print(f"üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –í–°–Ü —Ç–æ–≤–∞—Ä–∏: {len(products_to_update)}")
    
    if not products_to_update:
        print("‚úÖ –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return 0

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å
    print(f"\nüöÄ –û–Ω–æ–≤–ª–µ–Ω–Ω—è {len(products_to_update)} —Ç–æ–≤–∞—Ä—ñ–≤...")

    client = PromClient(
        base_url=settings.prom_base_url,
        token=settings.prom_api_token,
        auth_header=settings.prom_auth_header,
        auth_scheme=settings.prom_auth_scheme,
        timeout_seconds=settings.http_timeout_seconds,
    )

    async with aiohttp.ClientSession() as session:
        await send_updates(session, client, products_to_update, BATCH_SIZE)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    state = {
        "timestamp": datetime.now().isoformat(),
        "products": {p["id"]: p for p in all_products}
    }
    with open(state_file, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return 0

if __name__ == "__main__":
    raise SystemExit(asyncio.run(main_async()))
