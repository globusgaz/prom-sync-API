import os
import json
import xml.etree.ElementTree as ET
import time
import asyncio
import aiohttp
from hashlib import md5
from typing import List, Dict, Any, Tuple, Optional

# ---------------- –ö–æ–Ω—Ñ—ñ–≥ ----------------

API_URL = "https://my.prom.ua/api/v1/products/edit_by_external_id"
API_TOKEN = os.getenv("PROM_API_TOKEN")

FEEDS_FILE = "feeds.txt"
STATE_FILE = "product_state.json"

# –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
BATCH_SIZE = 100
CONCURRENT_REQUESTS = 3
REQUEST_TIMEOUT_FEED = 180
REQUEST_TIMEOUT_API = 120
DELAY_BETWEEN_WAVES = 0.3

# –í–∏–º–æ–≥–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ: —è–∫—â–æ —Ö–æ—á –æ–¥–∏–Ω —Ñ—ñ–¥ –≤–ø–∞–≤ ‚Äî –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ –≤–∑–∞–≥–∞–ª—ñ
REQUIRE_ALL_FEEDS = True

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ñ—ñ–¥—ñ–≤ (—â–æ–± –º–µ–Ω—à–µ –±–ª–æ–∫—É–≤–∞–ª–∏)
HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/117.0.0.0 Safari/537.36"
    )
}

# ---------------- –î–æ–ø–æ–º—ñ–∂–Ω—ñ ----------------

def load_previous_state() -> Dict[str, Dict[str, Any]]:
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}

def save_current_state(products: List[Dict[str, Any]]) -> None:
    state = {}
    for p in products:
        state[p["id"]] = {
            "price": p.get("price"),
            "presence": p.get("presence"),
            "quantity_in_stock": p.get("quantity_in_stock"),
        }
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def has_changed(product: Dict[str, Any], old_state: Dict[str, Dict[str, Any]]) -> bool:
    pid = product["id"]
    if pid not in old_state:
        return True
    old = old_state[pid]
    return (
        old.get("price") != product.get("price") or
        old.get("presence") != product.get("presence") or
        old.get("quantity_in_stock") != product.get("quantity_in_stock")
    )

def _safe_float(text: Optional[str]) -> Optional[float]:
    if not text:
        return None
    try:
        return float(text.replace(",", ".").strip())
    except Exception:
        return None

def _text_of(node: Optional[ET.Element]) -> Optional[str]:
    return node.text.strip() if node is not None and node.text else None

def _starts_with_fpref(x: str) -> bool:
    return len(x) >= 3 and x[0] == "f" and x[1].isdigit() and x[2] == "_"

# ---------------- –ü–∞—Ä—Å–∏–Ω–≥ —Ñ—ñ–¥—ñ–≤ ----------------
# external_id –¥–ª—è API –º–∞—î —Å–ø—ñ–≤–ø–∞—Å—Ç–∏ –∑ —Ç–∏–º, —â–æ –≤ YML:
# - —è–∫—â–æ —É vendorCode –≤–∂–µ fN_... ‚Üí –±–µ—Ä–µ–º–æ —è–∫ —î
# - —ñ–Ω–∞–∫—à–µ —è–∫—â–æ offer/@id –≤–∂–µ fN_... ‚Üí –±–µ—Ä–µ–º–æ —è–∫ —î
# - —ñ–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å f{feed_index}_ –¥–æ (vendorCode –∞–±–æ offer_id –∞–±–æ md5(offer))

def _infer_availability(offer: ET.Element) -> Tuple[Optional[str], Optional[int], bool]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î (presence, quantity_in_stock, sure_flag).
    sure_flag=True ‚Äî –º–æ–∂–Ω–∞ –±–µ–∑–ø–µ—á–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å (presence_sure).
    """
    avail_attr = offer.get("available")
    if avail_attr is not None:
        v = avail_attr.strip().lower()
        if v in {"true", "1", "yes", "available", "in_stock"}:
            return "available", 1, True
        if v in {"false", "0", "no", "not_available", "out_of_stock"}:
            return "not_available", 0, True

    for tag in ("quantity", "stock_quantity", "count", "quantity_in_stock", "g:quantity"):
        node = offer.find(tag)
        if node is not None and node.text:
            q = _safe_float(node.text)
            if q is not None:
                qi = max(0, int(q))
                return ("available" if qi > 0 else "not_available"), qi, True

    for tag in ("availability", "instock", "in_stock", "g:availability"):
        node = offer.find(tag)
        if node is not None and node.text:
            t = node.text.strip().lower()
            if t in {"true", "1", "in stock", "available", "yes", "instock"}:
                return "available", 1, True
            if t in {"false", "0", "out of stock", "unavailable", "no"}:
                return "not_available", 0, True

    return None, None, False

def _extract_price(offer: ET.Element) -> Optional[float]:
    node = offer.find("price")
    if node is not None and node.text:
        return _safe_float(node.text)
    for tag in ("g:price", "current_price"):
        node = offer.find(tag)
        if node is not None and node.text:
            v = _safe_float(node.text)
            if v is not None:
                return v
    return None

def _build_external_id(offer: ET.Element, feed_index: int) -> Optional[str]:
    offer_id = offer.get("id") or ""
    vendor_code = _text_of(offer.find("vendorCode")) or ""

    if vendor_code and _starts_with_fpref(vendor_code):
        return vendor_code
    if offer_id and _starts_with_fpref(offer_id):
        return offer_id

    base = vendor_code or offer_id or md5(ET.tostring(offer)).hexdigest()
    return f"f{feed_index}_{base}" if base else None

async def parse_feed(session: aiohttp.ClientSession, url: str, feed_index: int) -> Tuple[bool, List[Dict[str, Any]]]:
    try:
        async with session.get(url, headers=HEADERS, timeout=REQUEST_TIMEOUT_FEED) as resp:
            if resp.status != 200:
                print(f"‚ùå {url} ‚Äî HTTP {resp.status}")
                return False, []
            content = await resp.read()
            root = ET.fromstring(content)
            offers = root.findall(".//offer")

            products: List[Dict[str, Any]] = []
            for offer in offers:
                external_id = _build_external_id(offer, feed_index)
                if not external_id:
                    continue

                price = _extract_price(offer)
                presence, qty, sure = _infer_availability(offer)

                item: Dict[str, Any] = {"id": external_id}
                if price is not None:
                    item["price"] = price
                if sure:
                    item["presence"] = presence
                    item["quantity_in_stock"] = qty
                    item["_presence_sure"] = True
                else:
                    item["_presence_sure"] = False

                products.append(item)

            return True, products
    except Exception as e:
        print(f"‚ùå {url}: {e}")
        return False, []

# ---------------- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É Prom ----------------

async def send_updates(session: aiohttp.ClientSession, batch: List[Dict[str, Any]], batch_num: int, total_batches: int) -> None:
    headers = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json",
        "X-LANGUAGE": "uk",
    }

    payload: List[Dict[str, Any]] = []
    for item in batch:
        obj = {"id": item["id"]}
        if item.get("price") is not None:
            obj["price"] = item["price"]
        if item.get("_presence_sure"):
            obj["presence"] = item.get("presence")
            obj["presence_sure"] = True
            obj["quantity_in_stock"] = item.get("quantity_in_stock")
        payload.append(obj)

    print(f"üîÑ –ü–∞—Ä—Ç—ñ—è {batch_num}/{total_batches} ({len(payload)} —Ç–æ–≤–∞—Ä—ñ–≤)")
    try:
        async with session.post(API_URL, headers=headers, json=payload, timeout=REQUEST_TIMEOUT_API) as r:
            txt = await r.text()
            if r.status == 200:
                try:
                    result = json.loads(txt)
                    processed = len(result.get("processed_ids", []))
                    errors = result.get("errors", {})
                    if errors:
                        print(f"‚ö†Ô∏è –ü–∞—Ä—Ç—ñ—è {batch_num}: –æ–±—Ä–æ–±–ª–µ–Ω–æ {processed}/{len(payload)}, –ø–æ–º–∏–ª–æ–∫: {len(errors)}")
                        for k, v in list(errors.items())[:5]:
                            print(f"  ‚ùå {k}: {v}")
                    else:
                        print(f"‚úÖ –ü–∞—Ä—Ç—ñ—è {batch_num}: {processed}/{len(payload)}")
                    if batch_num == 1:
                        print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å API: {json.dumps(result, ensure_ascii=False, indent=2)[:500]}")
                except json.JSONDecodeError:
                    print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {batch_num}: –Ω–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {txt[:200]}")
            else:
                print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {batch_num}: HTTP {r.status}: {txt[:200]}")
    except Exception as e:
        print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {batch_num}: {e}")

# ---------------- –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ----------------

async def main_async() -> None:
    if not API_TOKEN:
        print("‚ùå PROM_API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    if not os.path.exists(FEEDS_FILE):
        print(f"‚ùå {FEEDS_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    with open(FEEDS_FILE, "r", encoding="utf-8") as f:
        feed_urls = [line.strip() for line in f if line.strip()]

    old_state = load_previous_state()
    print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω: {len(old_state)} —Ç–æ–≤–∞—Ä—ñ–≤\n")

    print("üîÑ –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ —Ñ—ñ–¥—ñ–≤...")
    all_products: List[Dict[str, Any]] = []
    failed: List[str] = []

    async with aiohttp.ClientSession() as session:
        tasks = [parse_feed(session, url, i + 1) for i, url in enumerate(feed_urls)]
        results = await asyncio.gather(*tasks)
        for url, (ok, products) in zip(feed_urls, results):
            if ok:
                print(f"‚úÖ {url}: {len(products)} —Ç–æ–≤–∞—Ä—ñ–≤")
                all_products.extend(products)
            else:
                failed.append(url)

    print("\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–±–æ—Ä—É:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ñ—ñ–¥—ñ–≤: {len(feed_urls) - len(failed)}/{len(feed_urls)}")
    print(f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}\n")

    if failed:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ—ñ–¥–∏:")
        for u in failed:
            print(f"  - {u}")
        if REQUIRE_ALL_FEEDS:
            print("\nüõë –ó–£–ü–ò–ù–ö–ê: –ù–µ –≤—Å—ñ —Ñ—ñ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ! –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.")
            return

    if not all_products:
        print("‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤!")
        return

    changed = [p for p in all_products if has_changed(p, old_state)]
    print("üîç –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω:")
    print(f"üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")
    print(f"üîÑ –ó–º—ñ–Ω–∏–ª–æ—Å—å: {len(changed)}\n")

    if not changed:
        print("‚úÖ –ù–µ–º–∞—î –∑–º—ñ–Ω ‚Äî –Ω—ñ—á–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏")
        save_current_state(all_products)
        return

    total_batches = (len(changed) - 1) // BATCH_SIZE + 1
    print(f"üöÄ –û–Ω–æ–≤–ª–µ–Ω–Ω—è {len(changed)} —Ç–æ–≤–∞—Ä—ñ–≤ —É {total_batches} –ø–∞—Ä—Ç—ñ—è—Ö...")

    start = time.time()
    async with aiohttp.ClientSession() as api_sess:
        for i in range(0, len(changed), BATCH_SIZE * CONCURRENT_REQUESTS):
            jobs = []
            for j in range(CONCURRENT_REQUESTS):
                idx = i + j * BATCH_SIZE
                if idx >= len(changed):
                    break
                batch = changed[idx: idx + BATCH_SIZE]
                batch_num = idx // BATCH_SIZE + 1
                jobs.append(send_updates(api_sess, batch, batch_num, total_batches))
            await asyncio.gather(*jobs)
            await asyncio.sleep(DELAY_BETWEEN_WAVES)

    dur = time.time() - start
    save_current_state(all_products)
    print(f"\nüíæ –°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {len(all_products)} —Ç–æ–≤–∞—Ä—ñ–≤")
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {dur:.1f}—Å ({dur/60:.1f}—Ö–≤)")
    if changed:
        print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {len(changed)/dur:.1f} —Ç–æ–≤–∞—Ä—ñ–≤/—Å–µ–∫")

def main() -> None:
    asyncio.run(main_async())

if __name__ == "__main__":
    main()
