import asyncio
import json
import os
import time
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
import hashlib
import xml.etree.ElementTree as ET

import aiohttp
import random
from urllib.parse import urlsplit, urlunsplit

from src.config import get_settings
from src.prom_client import PromClient

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
REQUEST_TIMEOUT_FEED = aiohttp.ClientTimeout(total=120)
REQUEST_TIMEOUT_API = aiohttp.ClientTimeout(total=30)
BATCH_SIZE = 50
API_DELAY = 0.1  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ API –∑–∞–ø–∏—Ç–∞–º–∏

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ —Ñ—ñ–¥—ñ–≤
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
    "Accept": "application/xml, text/xml, */*",
    "Accept-Language": "uk-UA,uk;q=0.9,en;q=0.8",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "Cache-Control": "no-cache",
    "Pragma": "no-cache"
}

# –í–∏—Ç—è–≥ –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑ URL (user:pass@host)
def _extract_basic_auth(url: str) -> Tuple[str, Optional[aiohttp.BasicAuth]]:
    parts = urlsplit(url)
    if parts.username or parts.password:
        clean_netloc = parts.hostname
        if parts.port:
            clean_netloc = f"{clean_netloc}:{parts.port}"
        clean_url = urlunsplit((parts.scheme, clean_netloc, parts.path, parts.query, parts.fragment))
        auth = aiohttp.BasicAuth(parts.username or "", parts.password or "")
        return clean_url, auth
    return url, None

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ external_id
def _starts_with_fpref(x: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ä—è–¥–æ–∫ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É fN_"""
    return len(x) >= 3 and x[0] == "f" and x[1].isdigit() and x[2] == "_"

def _text_of(elem: Optional[ET.Element]) -> str:
    """–ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç –∑ –µ–ª–µ–º–µ–Ω—Ç–∞"""
    return (elem.text or "").strip() if elem is not None else ""

def _build_external_id(offer: ET.Element, feed_index: int) -> Optional[str]:
    """–ü–æ–±—É–¥–æ–≤–∞ external_id –∑–≥—ñ–¥–Ω–æ –∑ –ª–æ–≥—ñ–∫–æ—é YML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    offer_id = offer.get("id") or ""
    vendor_code = _text_of(offer.find("vendorCode")) or ""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –ø—Ä–µ—Ñ—ñ–∫—Å fN_
    if vendor_code and _starts_with_fpref(vendor_code):
        return vendor_code
    if offer_id and _starts_with_fpref(offer_id):
        return offer_id
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–µ—Ñ—ñ–∫—Å—É, –¥–æ–¥–∞—î–º–æ f{feed_index}_
    base = vendor_code or offer_id or hashlib.md5(ET.tostring(offer)).hexdigest()
    return f"f{feed_index}_{base}" if base else None

def _extract_price(offer: ET.Element) -> Optional[float]:
    """–í–∏—Ç—è–≥—É—î —Ü—ñ–Ω—É –∑ offer"""
    price_elem = offer.find("price")
    if price_elem is not None and price_elem.text:
        try:
            return float(price_elem.text.strip().replace(",", "."))
        except (ValueError, AttributeError):
            pass
    return None

def _infer_availability(offer: ET.Element) -> Tuple[bool, int, bool]:
    """
    –í–∏–∑–Ω–∞—á–∞—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –∑ offer
    –ü–æ–≤–µ—Ä—Ç–∞—î: (presence, quantity, sure)
    sure = True –æ–∑–Ω–∞—á–∞—î —â–æ —î —á—ñ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ç—Ä–∏–±—É—Ç available
    available = offer.get("available")
    if available is not None:
        is_available = available.lower() in ("true", "1", "yes", "available", "in_stock")
        return is_available, 1 if is_available else 0, True
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–≥–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    quantity_tags = ["quantity", "stock_quantity", "count", "quantity_in_stock"]
    for tag in quantity_tags:
        qty_elem = offer.find(tag)
        if qty_elem is not None and qty_elem.text:
            try:
                qty = int(float(qty_elem.text.strip()))
                return qty > 0, qty, True
            except (ValueError, AttributeError):
                continue
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–≥–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
    presence_tags = ["presence", "in_stock", "available"]
    for tag in presence_tags:
        pres_elem = offer.find(tag)
        if pres_elem is not None and pres_elem.text:
            text = pres_elem.text.strip().lower()
            if text in ("true", "1", "yes", "available", "in_stock"):
                return True, 1, True
            elif text in ("false", "0", "no", "out_of_stock", "not_available"):
                return False, 0, True
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤, –≤–≤–∞–∂–∞—î–º–æ —â–æ —Ç–æ–≤–∞—Ä –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
    return True, 1, False

async def parse_feed(session: aiohttp.ClientSession, url: str, feed_index: int, auth: Optional[aiohttp.BasicAuth]) -> Tuple[bool, List[Dict[str, Any]]]:
    """–ü–∞—Ä—Å–∏—Ç—å —Ñ—ñ–¥ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤. –ü—ñ–¥—Ç—Ä–∏–º—É—î Basic Auth —Ç–∞ —Ä–µ—Ç—Ä–∞—ó."""
    backoffs = [0, 1, 2, 4, 8, 16]
    clean_url, embedded_auth = _extract_basic_auth(url)
    if embedded_auth is not None:
        auth = embedded_auth
    for attempt, delay in enumerate(backoffs):
        if delay:
            await asyncio.sleep(delay)
        try:
            ua = HEADERS["User-Agent"]
            if attempt:
                ua = f"{ua} rv/{random.randint(60,120)}.0"
            headers = {**HEADERS, "User-Agent": ua, "Referer": clean_url}
            async with session.get(clean_url, headers=headers, timeout=REQUEST_TIMEOUT_FEED, auth=auth) as resp:
                if not (200 <= resp.status < 300):
                    if resp.status in (403, 429) or 500 <= resp.status <= 599:
                        print(f"‚ö†Ô∏è {clean_url} ‚Äî HTTP {resp.status}, —Ä–µ—Ç—Ä–∞–π #{attempt}")
                        continue
                    print(f"‚ùå {clean_url} ‚Äî HTTP {resp.status}")
                    return False, []
                content = await resp.read()
        except Exception as e:
            print(f"‚ö†Ô∏è {clean_url}: {e}, —Ä–µ—Ç—Ä–∞–π #{attempt}")
            continue
        # –ü–∞—Ä—Å–∏–º–æ –ø—Ä–∏ —É—Å–ø—ñ—à–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        try:
            root = ET.fromstring(content)
            offers = root.findall(".//offer")
        except ET.ParseError as e:
            print(f"‚ùå XML parse error {clean_url}: {e}")
            return False, []

        products: List[Dict[str, Any]] = []
        for offer in offers:
            external_id = _build_external_id(offer, feed_index)
            if not external_id:
                continue
            price = _extract_price(offer)
            presence, qty, sure = _infer_availability(offer)
            item: Dict[str, Any] = {"id": external_id}
            if price is not None:
                item["price"] = price
            if sure:
                item["presence"] = presence
                item["quantity_in_stock"] = qty
                item["_presence_sure"] = True
            else:
                item["_presence_sure"] = False
            products.append(item)
        return True, products
    print(f"‚ùå {clean_url}: –≤–∏—á–µ—Ä–ø–∞–Ω–æ —Å–ø—Ä–æ–±–∏")
    return False, []

async def send_updates(session: aiohttp.ClientSession, client: PromClient, products: List[Dict[str, Any]], batch_size: int = BATCH_SIZE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ Prom.ua"""
    batches = [products[i:i + batch_size] for i in range(0, len(products), batch_size)]
    
    for i, batch in enumerate(batches, 1):
        print(f"üîÑ –ü–∞—Ä—Ç—ñ—è {i}/{len(batches)} ({len(batch)} —Ç–æ–≤–∞—Ä—ñ–≤)")
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ payload
        payload = []
        for product in batch:
            item = {"id": product["id"]}
            
            if "price" in product:
                item["price"] = product["price"]
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —á—ñ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª
            if product.get("_presence_sure", False):
                item["presence"] = product["presence"]
                item["quantity_in_stock"] = product["quantity_in_stock"]
                item["presence_sure"] = True
            
            payload.append(item)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
        try:
            status, response_text = await client.update_products(session, "/api/v1/products/edit_by_external_id", payload)
            
            if 200 <= status < 300:
                print(f"‚úÖ –ü–∞—Ä—Ç—ñ—è {i} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {i}: HTTP {status}")
                try:
                    response_data = json.loads(response_text)
                    if "errors" in response_data:
                        error_count = 0
                        for product_id, error in response_data["errors"].items():
                            if error_count < 5:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 –ø–æ–º–∏–ª–æ–∫
                                print(f"  ‚ùå {product_id}: {error}")
                            error_count += 1
                        if error_count > 5:
                            print(f"  ... —Ç–∞ —â–µ {error_count - 5} –ø–æ–º–∏–ª–æ–∫")
                    print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å API: {response_text[:200]}...")
                except json.JSONDecodeError:
                    print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å API: {response_text[:200]}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–∞—Ä—Ç—ñ—ó {i}: {e}")
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        if i < len(batches):
            await asyncio.sleep(API_DELAY)

async def main_async() -> int:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    settings = get_settings()
    
    if not settings.prom_api_token:
        print("‚ùå PROM_API_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return 1
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è URL —Ñ—ñ–¥—ñ–≤
    feeds_file = os.path.join(os.getcwd(), "feeds.txt")
    if not os.path.exists(feeds_file):
        print(f"‚ùå –§–∞–π–ª {feeds_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return 1
    
    with open(feeds_file, "r", encoding="utf-8") as f:
        urls = [line.strip() for line in f if line.strip().startswith("http")]
    
    print(f"üîó –ó–Ω–∞–π–¥–µ–Ω–æ {len(urls)} —Ñ—ñ–¥—ñ–≤")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
    state_file = "product_state.json"
    previous_state = {}
    if os.path.exists(state_file):
        try:
            with open(state_file, "r", encoding="utf-8") as f:
                previous_state = json.load(f)
            print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω: {len(previous_state)} —Ç–æ–≤–∞—Ä—ñ–≤")
        except Exception:
            print("üìÇ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ —Ñ—ñ–¥—ñ–≤
    print("üîÑ –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ —Ñ—ñ–¥—ñ–≤...")
    all_products = []
    successful_feeds = 0
    
    async with aiohttp.ClientSession() as session:
        for i, url in enumerate(urls, 1):
            clean_url, auth = _extract_basic_auth(url)
            print(f"üîÑ –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–¥—É: {clean_url}")
            success, products = await parse_feed(session, clean_url, i, auth)
            if success:
                all_products.extend(products)
                successful_feeds += 1
                print(f"‚úÖ –§—ñ–¥ {clean_url}: {len(products)} —Ç–æ–≤–∞—Ä—ñ–≤")
            else:
                print(f"‚ùå –§—ñ–¥ {clean_url}: –ø–æ–º–∏–ª–∫–∞")
    
    print(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–±–æ—Ä—É:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ñ—ñ–¥—ñ–≤: {successful_feeds}/{len(urls)}")
    print(f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")
    
    if not all_products:
        print("‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return 1
    
    # –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω
    print("\nüîç –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω:")
    current_state = {p["id"]: p for p in all_products}
    changed_products = []
    
    for product in all_products:
        product_id = product["id"]
        if product_id not in previous_state:
            changed_products.append(product)
        else:
            prev = previous_state[product_id]
            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ü—ñ–Ω—É —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å
            if (product.get("price") != prev.get("price") or 
                product.get("presence") != prev.get("presence") or
                product.get("quantity_in_stock") != prev.get("quantity_in_stock")):
                changed_products.append(product)
    
    print(f"üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")
    print(f"üîÑ –ó–º—ñ–Ω–∏–ª–æ—Å—å: {len(changed_products)}")
    print(f"‚úÖ –ë–µ–∑ –∑–º—ñ–Ω: {len(all_products) - len(changed_products)}")
    
    if not changed_products:
        print("‚è≠Ô∏è –ó–º—ñ–Ω –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return 0
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å
    print(f"\nüöÄ –û–Ω–æ–≤–ª–µ–Ω–Ω—è {len(changed_products)} —Ç–æ–≤–∞—Ä—ñ–≤...")
    
    client = PromClient(
        base_url=settings.prom_base_url,
        token=settings.prom_api_token,
        auth_header=settings.prom_auth_header,
        auth_scheme=settings.prom_auth_scheme,
        timeout_seconds=settings.http_timeout_seconds,
    )
    
    async with aiohttp.ClientSession() as session:
        await send_updates(session, client, changed_products, BATCH_SIZE)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    with open(state_file, "w", encoding="utf-8") as f:
        json.dump(current_state, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return 0

if __name__ == "__main__":
    raise SystemExit(asyncio.run(main_async()))
