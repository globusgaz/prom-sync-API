# src/prom_updater.py
import os
import asyncio
import aiohttp
import requests
import orjson
import lxml.etree as ET
from dotenv import load_dotenv

load_dotenv()

PROM_API_KEY = os.getenv("PROM_API_KEY")
PROM_BASE_URL = "https://my.prom.ua/api/v1/products/edit"

HEADERS = {
    "Authorization": f"Bearer {PROM_API_KEY}",
    "Content-Type": "application/json",
}

# ==== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –§–Ü–î–Ü–í ====
async def fetch_feed(session, url: str):
    try:
        async with session.get(url, headers={"User-Agent": "Mozilla/5.0"}) as resp:
            resp.raise_for_status()
            text = await resp.text()
            root = ET.fromstring(text.encode("utf-8"))
            offers = root.findall(".//offer")
            print(f"‚úÖ {url} ‚Äî {len(offers)} —Ç–æ–≤–∞—Ä—ñ–≤")
            return offers
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É {url}: {e}")
        return []


async def load_all_feeds(file_path="feeds.txt"):
    with open(file_path, "r") as f:
        urls = [line.strip() for line in f if line.strip()]

    async with aiohttp.ClientSession() as session:
        tasks = [fetch_feed(session, url) for url in urls]
        results = await asyncio.gather(*tasks)
        all_offers = [offer for sublist in results for offer in sublist]
        return all_offers


# ==== –ü–†–û–ú API ====
def get_prom_products():
    """–ó–∞–±—Ä–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ Prom (–¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –º–∞–ø–∏ vendorCode ‚Üí id)."""
    url = "https://my.prom.ua/api/v1/products/list"
    page = 1
    vendor_to_id = {}

    while True:
        resp = requests.get(url, headers=HEADERS, params={"page": page, "limit": 100})
        if resp.status_code != 200:
            print(f"‚ö†Ô∏è Prom list error {resp.status_code}: {resp.text}")
            break

        data = resp.json()
        products = data.get("products", [])
        if not products:
            break

        for p in products:
            vendor_to_id[p.get("sku")] = p.get("id")

        page += 1

    print(f"DEBUG: –º–∞–ø–∞ vendor->id —Ä–æ–∑–º—ñ—Ä = {len(vendor_to_id)}")
    return vendor_to_id


def send_updates(updates):
    if not updates:
        print("üö´ –ù–µ–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
        return

    payload = {"products": updates}

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≥–æ, —â–æ —Ä–µ–∞–ª—å–Ω–æ —à–ª–µ–º–æ
    print("DEBUG: payload –¥–æ Prom:")
    print(orjson.dumps(payload, option=orjson.OPT_INDENT_2).decode())

    resp = requests.post(PROM_BASE_URL, headers=HEADERS, data=orjson.dumps(payload))
    print(f"HTTP {resp.status_code} ‚Äî {resp.text}")


# ==== –ì–û–õ–û–í–ù–ê –õ–û–ì–Ü–ö–ê ====
async def main():
    offers = await load_all_feeds()
    print(f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {len(offers)}")

    vendor_to_id = get_prom_products()
    updates = []

    for offer in offers:
        vendor_code = offer.get("id") or offer.findtext("vendorCode")
        price = offer.findtext("price")
        quantity = offer.findtext("quantity")

        if vendor_code in vendor_to_id:
            updates.append(
                {
                    "id": vendor_to_id[vendor_code],
                    "price": float(price) if price else None,
                    "quantity": int(quantity) if quantity else 0,
                }
            )

    print(f"üõ†Ô∏è –ì–æ—Ç–æ–≤–æ {len(updates)} –æ–Ω–æ–≤–ª–µ–Ω—å")
    send_updates(updates)


if __name__ == "__main__":
    asyncio.run(main())
