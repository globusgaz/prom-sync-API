import asyncio
import json
import os
import time
import hashlib
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any

import aiohttp
import xml.etree.ElementTree as ET

from src.config import get_settings
from src.prom_client import PromClient

# -------------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
# -------------------------------

REQUEST_TIMEOUT_FEED = aiohttp.ClientTimeout(total=120)
API_DELAY_BETWEEN_BATCHES_SEC = 0.15
STATE_FILE = "product_state.json"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ñ—ñ–¥—ñ–≤ (—ñ–º—ñ—Ç—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä)
HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/117.0.0.0 Safari/537.36"
    ),
    "Accept": "application/xml, text/xml, */*",
    "Accept-Language": "uk-UA,uk;q=0.9,en;q=0.8",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "Cache-Control": "no-cache",
    "Pragma": "no-cache",
}


# -------------------------------
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# -------------------------------

def _starts_with_fpref(x: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–µ—Ñ—ñ–∫—Å —Ñ–æ—Ä–º–∞—Ç—É fN_ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, f1_, f4_ ...)"""
    return len(x) >= 3 and x[0] == "f" and x[1].isdigit() and x[2] == "_"


def _text_of(elem: Optional[ET.Element]) -> str:
    """–ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ XML-–µ–ª–µ–º–µ–Ω—Ç–∞"""
    return (elem.text or "").strip() if elem is not None else ""


def _build_external_id(offer: ET.Element, feed_index: int) -> Optional[str]:
    """
    –ë—É–¥—É—î external_id —ñ–¥–µ–Ω—Ç–∏—á–Ω–æ YML-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É:
    - –Ø–∫—â–æ vendorCode –∞–±–æ offer/@id –≤–∂–µ –º–∞—î –ø—Ä–µ—Ñ—ñ–∫—Å fN_ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î
    - –Ü–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ f{feed_index}_ –¥–æ (vendorCode | offer/@id | md5(offer))
    """
    offer_id = offer.get("id") or ""
    vendor_code = _text_of(offer.find("vendorCode")) or ""

    if vendor_code and _starts_with_fpref(vendor_code):
        return vendor_code
    if offer_id and _starts_with_fpref(offer_id):
        return offer_id

    base = vendor_code or offer_id or hashlib.md5(ET.tostring(offer)).hexdigest()
    return f"f{feed_index}_{base}" if base else None


def _extract_price(offer: ET.Element) -> Optional[float]:
    """–í–∏—Ç—è–≥—É—î —Ü—ñ–Ω—É –∑ —Ç–µ–≥—É <price>"""
    node = offer.find("price")
    if node is None or node.text is None:
        return None
    raw = node.text.strip().replace(",", ".")
    try:
        return float(raw)
    except ValueError:
        return None


def _infer_availability(offer: ET.Element) -> Tuple[bool, int, bool]:
    """
    –í–∏–∑–Ω–∞—á–∞—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂: (presence, quantity_in_stock, sure)

    –õ–æ–≥—ñ–∫–∞:
    - –Ø–∫—â–æ –∞—Ç—Ä–∏–±—É—Ç offer/@available –∑–∞–¥–∞–Ω–∏–π ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ (sure=True)
    - –ê–±–æ —è–∫—â–æ —î —á–∏—Å–ª–æ–≤—ñ –∫—ñ–ª—å–∫—ñ—Å–Ω—ñ —Ç–µ–≥–∏ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö (sure=True)
    - –ê–±–æ —è–∫—â–æ —î —è–≤–Ω—ñ —Ç–µ–≥–∏ presence/in_stock/available ‚Äî —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç—É—î–º–æ (sure=True)
    - –Ü–Ω–∞–∫—à–µ –Ω–µ —à–ª–µ–º–æ –Ω—ñ—á–æ–≥–æ –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å (sure=False), —â–æ–± –Ω–µ –∑—ñ–ø—Å—É–≤–∞—Ç–∏ —Å—Ç–∞–Ω
    """
    # –ê—Ç—Ä–∏–±—É—Ç available
    available_attr = offer.get("available")
    if available_attr is not None:
        val = available_attr.strip().lower()
        is_on = val in ("true", "1", "yes", "available", "in_stock")
        return is_on, (1 if is_on else 0), True

    # –Ø–≤–Ω—ñ —Ç–µ–≥–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    for tag in ("quantity", "stock_quantity", "count", "quantity_in_stock"):
        node = offer.find(tag)
        if node is not None and node.text:
            try:
                qty = int(float(node.text.strip()))
                return (qty > 0), qty, True
            except ValueError:
                pass

    # –Ø–≤–Ω—ñ —Ç–µ–≥–∏ —Å—Ç–∞–Ω—É
    for tag in ("presence", "in_stock", "available"):
        node = offer.find(tag)
        if node is not None and node.text:
            val = node.text.strip().lower()
            if val in ("true", "1", "yes", "available", "in_stock"):
                return True, 1, True
            if val in ("false", "0", "no", "out_of_stock", "not_available"):
                return False, 0, True

    # –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
    return True, 1, False


# -------------------------------
# –†–æ–±–æ—Ç–∞ –∑ —Ñ—ñ–¥–∞–º–∏
# -------------------------------

async def _fetch_content(session: aiohttp.ClientSession, url: str) -> Optional[bytes]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤–º—ñ—Å—Ç —Ñ—ñ–¥–∞, –ø–æ–≤–µ—Ä—Ç–∞—î None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ."""
    try:
        async with session.get(url, headers=HEADERS, timeout=REQUEST_TIMEOUT_FEED) as resp:
            if resp.status != 200:
                print(f"‚ùå {url} ‚Äî HTTP {resp.status}")
                return None
            return await resp.read()
    except Exception as e:
        print(f"‚ùå {url}: {e}")
        return None


def _parse_offers(xml_content: bytes) -> List[ET.Element]:
    """–ü–∞—Ä—Å–∏—Ç—å XML —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ <offer>."""
    try:
        root = ET.fromstring(xml_content)
        return root.findall(".//offer")
    except ET.ParseError:
        return []


async def parse_feed(session: aiohttp.ClientSession, url: str, feed_index: int) -> Tuple[bool, List[Dict[str, Any]]]:
    """
    –ü–∞—Ä—Å–∏—Ç—å –æ–¥–∏–Ω —Ñ—ñ–¥ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î (ok, products):
    product = { id, price?, presence?, quantity_in_stock?, _presence_sure }
    """
    content = await _fetch_content(session, url)
    if content is None:
        return False, []

    offers = _parse_offers(content)
    products: List[Dict[str, Any]] = []

    for offer in offers:
        external_id = _build_external_id(offer, feed_index)
        if not external_id:
            continue

        price = _extract_price(offer)
        presence, qty, sure = _infer_availability(offer)

        item: Dict[str, Any] = {"id": external_id}
        if price is not None:
            item["price"] = price

        if sure:
            item["presence"] = presence
            item["quantity_in_stock"] = qty
            item["_presence_sure"] = True
        else:
            # –ù–µ —à–ª–µ–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å, —è–∫—â–æ —Å–∏–≥–Ω–∞–ª –Ω–µ—á—ñ—Ç–∫–∏–π
            item["_presence_sure"] = False

        products.append(item)

    return True, products


# -------------------------------
# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å —É Prom
# -------------------------------

def _build_payload(batch: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    –ì–æ—Ç—É—î payload –¥–ª—è /api/v1/products/edit_by_external_id.
    –í–∫–ª—é—á–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ –ø–æ–ª—è.
    """
    payload: List[Dict[str, Any]] = []
    for p in batch:
        row: Dict[str, Any] = {"id": p["id"]}
        if "price" in p:
            row["price"] = p["price"]
        if p.get("_presence_sure"):
            row["presence"] = p["presence"]
            row["quantity_in_stock"] = p["quantity_in_stock"]
            row["presence_sure"] = True
        payload.append(row)
    return payload


async def _send_batches(session: aiohttp.ClientSession, client: PromClient, products: List[Dict[str, Any]], batch_size: int) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞—Ç—á–∞–º–∏ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –ø–∞—É–∑–æ—é –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è RPS."""
    batches = [products[i:i + batch_size] for i in range(0, len(products), batch_size)]
    total = len(batches)
    for idx, batch in enumerate(batches, start=1):
        payload = _build_payload(batch)
        print(f"üîÑ –ü–∞—Ä—Ç—ñ—è {idx}/{total} ({len(batch)} —Ç–æ–≤–∞—Ä—ñ–≤)")
        try:
            status, text = await client.update_products(session, "/api/v1/products/edit_by_external_id", payload)
        except Exception as e:
            print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {idx}: –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ‚Äî {e}")
            await asyncio.sleep(API_DELAY_BETWEEN_BATCHES_SEC)
            continue

        if 200 <= status < 300:
            print(f"‚úÖ –ü–∞—Ä—Ç—ñ—è {idx}: OK")
        else:
            print(f"‚ùå –ü–∞—Ä—Ç—ñ—è {idx}: HTTP {status}")
            try:
                data = json.loads(text)
                errors = data.get("errors") or {}
                err_items = list(errors.items())
                if err_items:
                    print("  üîé –ü–µ—Ä—à—ñ –ø–æ–º–∏–ª–∫–∏:")
                    for j, (pid, err) in enumerate(err_items[:10], start=1):
                        print(f"   {j:>2}. {pid}: {err}")
                    rest = max(0, len(err_items) - 10)
                    if rest:
                        print(f"   ... —Ç–∞ —â–µ {rest} –ø–æ–º–∏–ª–æ–∫")
            except json.JSONDecodeError:
                print(f"üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å: {text[:300]}")

        if idx < total:
            await asyncio.sleep(API_DELAY_BETWEEN_BATCHES_SEC)


# -------------------------------
# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∞–Ω—É
# -------------------------------

def _load_prev_state(path: str) -> Dict[str, Dict[str, Any]]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω external_id -> –¥–∞–Ω—ñ."""
    if not os.path.exists(path):
        return {}
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}


def _save_state(path: str, state: Dict[str, Dict[str, Any]]) -> None:
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω external_id -> –¥–∞–Ω—ñ."""
    with open(path, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)


def _calc_changes(current: Dict[str, Dict[str, Any]], prev: Dict[str, Dict[str, Any]]) -> List[Dict[str, Any]]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ª–∏—à–µ –∑–º—ñ–Ω–µ–Ω—ñ/–Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è API-–≤–∏–∫–ª–∏–∫—ñ–≤."""
    changed: List[Dict[str, Any]] = []
    for eid, cur in current.items():
        old = prev.get(eid)
        if not old:
            changed.append(cur)
            continue
        if cur.get("price") != old.get("price"):
            changed.append(cur)
            continue
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∏ —ó—ó –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
        if cur.get("_presence_sure"):
            if (cur.get("presence") != old.get("presence")
                or cur.get("quantity_in_stock") != old.get("quantity_in_stock")):
                changed.append(cur)
    return changed


# -------------------------------
# –û—Å–Ω–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
# -------------------------------

async def main_async() -> int:
    settings = get_settings()
    if not settings.prom_api_token:
        print("‚ùå PROM_API_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return 1

    feeds_file = os.path.join(os.getcwd(), "feeds.txt")
    if not os.path.exists(feeds_file):
        print(f"‚ùå –§–∞–π–ª {feeds_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return 1

    with open(feeds_file, "r", encoding="utf-8") as f:
        urls = [line.strip() for line in f if line.strip().startswith("http")]

    print(f"üîó –ó–Ω–∞–π–¥–µ–Ω–æ {len(urls)} —Ñ—ñ–¥—ñ–≤")

    # –ó–±—ñ—Ä –∑ —Ñ—ñ–¥—ñ–≤
    print("üîÑ –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ —Ñ—ñ–¥—ñ–≤...")
    all_products: List[Dict[str, Any]] = []
    ok_count = 0

    async with aiohttp.ClientSession() as session:
        for i, url in enumerate(urls, start=1):
            ok, products = await parse_feed(session, url, i)
            if ok:
                ok_count += 1
                all_products.extend(products)
                print(f"‚úÖ {url}: {len(products)} —Ç–æ–≤–∞—Ä—ñ–≤")
            else:
                print(f"‚ùå {url}: –ø–æ–º–∏–ª–∫–∞")

    print("\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–±–æ—Ä—É:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ñ—ñ–¥—ñ–≤: {ok_count}/{len(urls)}")
    print(f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")

    if not all_products:
        print("‚ö†Ô∏è –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return 0

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–º—ñ–Ω
    prev_state = _load_prev_state(STATE_FILE)
    current_state: Dict[str, Dict[str, Any]] = {p["id"]: p for p in all_products}
    changed = _calc_changes(current_state, prev_state)

    print("\nüîç –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω:")
    print(f"üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_products)}")
    print(f"üîÑ –ó–º—ñ–Ω–∏–ª–æ—Å—å: {len(changed)}")
    print(f"‚úÖ –ë–µ–∑ –∑–º—ñ–Ω: {len(all_products) - len(changed)}")

    if not changed:
        print("‚è≠Ô∏è –ó–º—ñ–Ω –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return 0

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–º—ñ–Ω
    client = PromClient(
        base_url=settings.prom_base_url,
        token=settings.prom_api_token,
        auth_header=settings.prom_auth_header,
        auth_scheme=settings.prom_auth_scheme,
        timeout_seconds=settings.http_timeout_seconds,
    )

    async with aiohttp.ClientSession() as session:
        await _send_batches(session, client, changed, getattr(settings, "batch_size", 100))

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    _save_state(STATE_FILE, current_state)
    print("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return 0


if __name__ == "__main__":
    raise SystemExit(asyncio.run(main_async()))
